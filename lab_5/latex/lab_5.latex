\documentclass[a4paper, 14pt]{extarticle}
\UseRawInputEncoding

% Поля
%--------------------------------------
\usepackage{geometry}
\geometry{a4paper,tmargin=2cm,bmargin=2cm,lmargin=3cm,rmargin=1cm}
%--------------------------------------


%Russian-specific packages
%--------------------------------------
\usepackage[T2A]{fontenc}
\usepackage[utf8]{inputenc} 
\usepackage[english, main=russian]{babel}
%--------------------------------------

\usepackage{textcomp}

% Красная строка
%--------------------------------------
\usepackage{indentfirst}               
%--------------------------------------             


%Graphics
%--------------------------------------
\usepackage{graphicx}
\graphicspath{ {./images/} }
\usepackage{wrapfig}
%--------------------------------------

% Полуторный интервал
%--------------------------------------
\linespread{1.3}                    
%--------------------------------------

%Выравнивание и переносы
%--------------------------------------
% Избавляемся от переполнений
\sloppy
% Запрещаем разрыв страницы после первой строки абзаца
\clubpenalty=10000
% Запрещаем разрыв страницы после последней строки абзаца
\widowpenalty=10000
%--------------------------------------

%Списки
\usepackage{enumitem}

%Подписи
\usepackage{caption} 

%Гиперссылки
\usepackage{hyperref}

\hypersetup {
	unicode=true
}

%Рисунки
%--------------------------------------
\DeclareCaptionLabelSeparator*{emdash}{~--- }
\captionsetup[figure]{labelsep=emdash,font=onehalfspacing,position=bottom}
%--------------------------------------

\usepackage{tempora}

%Листинги
%--------------------------------------
\usepackage{listings}
\lstset{
  basicstyle=\ttfamily\footnotesize, 
  %basicstyle=\footnotesize\AnkaCoder,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks shoulbd only happen at whitespace
  breaklines=true,                 % sets automatic line breaking
  captionpos=t,                    % sets the caption-position to bottom
  inputencoding=utf8,
  frame=single,                    % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\bf,       % keyword style
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  xleftmargin=25pt,
  xrightmargin=25pt,
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=1,                    % the step between two line-numbers. If it's 1, each line will be numbered
  tabsize=2,                       % sets default tabsize to 8 spaces
  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}
%--------------------------------------

%%% Математические пакеты %%%
%--------------------------------------
\usepackage{amsthm,amsfonts,amsmath,amssymb,amscd}  % Математические дополнения от AMS
\usepackage{mathtools}                              % Добавляет окружение multlined
\usepackage[perpage]{footmisc}
%--------------------------------------

%--------------------------------------
%			НАЧАЛО ДОКУМЕНТА
%--------------------------------------

\begin{document}

%--------------------------------------
%			ТИТУЛЬНЫЙ ЛИСТ
%--------------------------------------
\begin{titlepage}
\thispagestyle{empty}
\newpage


%Шапка титульного листа
%--------------------------------------
\vspace*{-60pt}
\hspace{-65pt}
\begin{minipage}{0.3\textwidth}
\hspace*{-20pt}\centering
\includegraphics[width=\textwidth]{emblem}
\end{minipage}
\begin{minipage}{0.67\textwidth}\small \textbf{
\vspace*{-0.7ex}
\hspace*{-6pt}\centerline{Министерство науки и высшего образования Российской Федерации}
\vspace*{-0.7ex}
\centerline{Федеральное государственное бюджетное образовательное учреждение }
\vspace*{-0.7ex}
\centerline{высшего образования}
\vspace*{-0.7ex}
\centerline{<<Московский государственный технический университет}
\vspace*{-0.7ex}
\centerline{имени Н.Э. Баумана}
\vspace*{-0.7ex}
\centerline{(национальный исследовательский университет)>>}
\vspace*{-0.7ex}
\centerline{(МГТУ им. Н.Э. Баумана)}}
\end{minipage}
%--------------------------------------

%Полосы
%--------------------------------------
\vspace{-25pt}
\hspace{-35pt}\rule{\textwidth}{2.3pt}

\vspace*{-20.3pt}
\hspace{-35pt}\rule{\textwidth}{0.4pt}
%--------------------------------------

\vspace{1.5ex}
\hspace{-35pt} \noindent \small ФАКУЛЬТЕТ\hspace{80pt} <<Информатика и системы управления>>

\vspace*{-16pt}
\hspace{47pt}\rule{0.83\textwidth}{0.4pt}

\vspace{0.5ex}
\hspace{-35pt} \noindent \small КАФЕДРА\hspace{50pt} <<Теоретическая информатика и компьютерные технологии>>

\vspace*{-16pt}
\hspace{30pt}\rule{0.866\textwidth}{0.4pt}
  
\vspace{11em}

\begin{center}
\Large {\bf Лабораторная работа № 5} \\ 
\large {\bf по курсу <<Компьютерные сети>>} \\
\large <<Реализация WebSocket клиента и сервера на языке Golang>> 
\end{center}\normalsize

\vspace{8em}


\begin{flushright}
  {Студент группы ИУ9-31Б Горбунов А. Д. \hspace*{15pt}\\ 
  \vspace{2ex}
  Преподаватель Посевин Д. П.\hspace*{15pt}}
\end{flushright}

\bigskip

\vfill
 

\begin{center}
\textsl{Москва 2023}
\end{center}
\end{titlepage}
%--------------------------------------
%		КОНЕЦ ТИТУЛЬНОГО ЛИСТА
%--------------------------------------

\renewcommand{\ttdefault}{pcr}

\setlength{\tabcolsep}{3pt}
\newpage
\setcounter{page}{2}

\section{Задание}\label{Sect::task}
    Реализовать сетевую службу на языке программирования Golang взаимодействующую по протоколу связи WebSocket по вариантам. Клиентское приложение получает через стандартный поток ввода данные и в формате JSON передает их на сервер, сервер выполняет вычисления и возвращает результат обратно клиенту, который в свою очередь выводит полученный результат в стандартный поток вывода.
    
    Для тестирования можно использовать исходные коды программ на языке Python продемонстрированные на лекции.

    Входные данные:
    Результат эксперимента представляющий из себя последовательность действительных чисел произвольной длинны.

    Функционал сервера:
    Среднее значение, среднеквадратичное отклонение и относительную погрешность эксперимента в процентах.
\section{Результаты}\label{Sect::res}

Исходный код программы представлен в листинге~\ref{lst:code1}, ~\ref{lst:code2}

\begin{figure}[!htb]
\begin{lstlisting}[language={go},caption={client.go},label={lst:code1}]
package main
import (
  "encoding/json"
  "fmt"
  "log"
  "github.com/gorilla/websocket"
  "github.com/skorobogatov/input"
)
var addr = "" 
func sendMessageToServer(numbers []float64) ([]byte, error) {
  c, _, err := websocket.DefaultDialer.Dial(addr, nil)
  if err != nil {    return nil, err  }
  defer c.Close()
  requestBody := map[string]interface{}{"numbers": numbers}
  jsonBody, err := json.Marshal(requestBody)
  if err != nil {    return nil, err  }
  err = c.WriteMessage(websocket.TextMessage, jsonBody)
  if err != nil {    return nil, err  }
  _, response, err := c.ReadMessage()
  if err != nil {    return nil, err  }
  return response, nil
}
func main() {
    fmt.Print("IP: ")
    ip := ""
    fmt.Scan(&ip)
    fmt.Print("Port: ")
    port := ""
    fmt.Scan(&port)
    addr = "ws://" + ip + ":" + port
  for {
    fmt.Println("Enter the command ('quit' to exit, 'calc' to send data):")
    command := input.Gets()
        switch command {
    case "quit":
      return
    case "calc":
      var numbers []float64
      var n int
      fmt.Print("Enter the number of numbers: ")
      fmt.Scanln(&n)
      fmt.Println("Enter numbers:")
      for i := 0; i < n; i++ {
        var num float64
        fmt.Scanln(&num)
        numbers = append(numbers, num)
      }
      response, err := sendMessageToServer(numbers)
      if err != nil {
        log.Fatal("Error sending message to server:", err)
      }
      fmt.Println("Response from the server:", string(response))
    default:
      fmt.Println("Error: unknown command")
    }
  }
}
\end{lstlisting}
\end{figure}

\begin{figure}[!htb]
\begin{lstlisting}[language={python},caption={server.py},label={lst:code2}]
import asyncio
import math
import websockets
import json

async def calculate_experiment_results(data):
    numbers = data['numbers']
    result = []
    average = sum(numbers) / len(numbers)
    result.append(f"Average: {average}")

    sum_squares = sum((num - average) ** 2 for num in numbers)
    mean_square_deviation = math.sqrt(sum_squares / len(numbers))
    result.append(f"Standard deviation: {mean_square_deviation}")

    relative_error = (mean_square_deviation / average) * 100
    result.append(f"Relative error: {relative_error}")

    return result

async def server(websocket, path):
    while True:
        try:
            data = await websocket.recv()
            print(f"Received data: {data}")

            data = json.loads(data)

            result = await calculate_experiment_results(data)

            await websocket.send(json.dumps(result, ensure_ascii=False).encode('utf-8'))
        except websockets.exceptions.ConnectionClosedError:
            break
print("IP:", end=" ")
ip = input()
print("Port:", end=" ")
port = input()
start_server = websockets.serve(server, ip, port)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
\end{lstlisting}
\end{figure}

\begin{figure}[!htb]
Результат запуска представлен на рисунке ~\ref{fig:picture_1.png}, ~\ref{fig:picture_2.png}
\end{figure}

\begin{figure}[!htb]
	\centering
	\includegraphics[width=0.8\textwidth]{picture_1.png}
\caption{Пример на localhost}
\label{fig:picture_1.png}
\end{figure}

\begin{figure}[!htb]
	\centering
	\includegraphics[width=0.8\textwidth]{picture_2.png}
\caption{Пример на серверах}
\label{fig:picture_2.png}
\end{figure}

\end{document}
